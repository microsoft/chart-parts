{
    "componentChunkName": "component---src-templates-doc-template-tsx",
    "path": "/documentation/introduction",
    "result": {"data":{"currentPage":{"html":"<h2 id=\"introduction--background\" style=\"position:relative;\"><a href=\"#introduction--background\" aria-label=\"introduction  background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction &#x26; Background</h2>\n<blockquote>\n<p><strong>chart-parts</strong> is a flexible\n<a href=\"https://www.springer.com/us/book/9780387245447\">Grammar-of-Graphics</a>\ndesigned for application developers.</p>\n</blockquote>\n<p>In the seminal book <em>The Grammar of Graphics</em>, Leland Wilkinson envisioned a\nsystem of charting components and data-flow processes to support the generation\nof charts.</p>\n<p><a href=\"https://www.springer.com/us/book/9780387245447\"><img src=\"/images/wilkinson_book.png\" alt=\"Wilkinson&#x27;s Book\"></a></p>\n<p>The vision of <strong>chart-parts</strong> is to implement a grammar of graphics in\nJavaScript in a flexible, architecture-agnostic way while dovetailing nicely\nwith frameworks application developers use such as React. To date,\nimplementations of the <em>Grammar of Graphics</em> have tended to exist as closed\nsystems. While a closed system can be useful for certain categories of users,\nwe believe that these systems should provide escape hatches and flexibility.</p>\n<h2 id=\"the-missing-abstraction\" style=\"position:relative;\"><a href=\"#the-missing-abstraction\" aria-label=\"the missing abstraction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Missing Abstraction</h2>\n<p>Charting is a common and complex task. Charting libraries are often implemented\nas <em>taxonomies</em> of charts, providing components such as <em>BarChart</em>,\n<em>LineChart</em>, <em>AreaChart</em>, or <em>ScatterPlot</em> to cover the most broadly used types\nof charts. When a developer wants to augment a chart with a modest graphic\nsuch as a mean line or an uncertainty band, or make a novel visualization,\nit's often necessary to eject out of the charting library and work directly\nwith a 2D rendering API such as <em>SVG</em>, <em>Canvas</em> or <em>WebGL</em>. Additionally,\ncharting libraries are often browser-dependent, which precludes the ability to\nabstractly describe charts independently of platform.</p>\n<p><img src=\"/images/missing_abstraction.png\" alt=\"The missing abstraction of charting\"></p>\n<p>We believe that the notion of a <em>Grammar of Graphics</em>, sometimes referred to as\n<em>mark-based visualization</em>, has been proved in many contexts to be an elegant\nway to describe expressive, functional charts that are not as constrained by\nthe charting library that is selected. Moreover, this level of abstraction is\neasier to develop software at than low-level graphics libraries, and is not\ncoupled to any platform.</p>\n<h2 id=\"key-concepts\" style=\"position:relative;\"><a href=\"#key-concepts\" aria-label=\"key concepts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Concepts</h2>\n<!--alex disable color -->\n<p>In <em>The Grammar of Graphics</em>, the author envisions a sequenced pipeline of\nsteps that are common to creating charts: including data transformations, scale\napplications, mark binding, and rendering of marks and guides. Each of these\nsteps is predicated on components existing to define these processes.</p>\n<p>These systems are built on the analogy that graphical elements are to charting as\nwords are to prose, and they are constructed of a \"language\" of fundamental\ncharting elements. These charting elements are described at a higher level than\nraw graphics primitives.</p>\n<p><img src=\"/images/analogy.png\" alt=\"Mark-to-word Analogy\"></p>\n<p><img src=\"/images/pipeline.png\" alt=\"Leland Wilkinson&#x27;s Grammar of Graphics Pipeline\"></p>\n<ul>\n<li><strong>Marks</strong> are a key concept in chart-parts, and any system implementing a\n<em>grammar-of-graphics</em>. Marks are the visual building blocks of charts, such as\nrectangles, dots, and arcs.</li>\n<li><strong>Scales</strong> are mathematical functions that allow us to translate values from\na source domain into a target domain. These allow us to translate data into\nvisually encoded values such as color or height.</li>\n<li><strong>Axes</strong> are a common feature of charts that allow us to understand the\nencoding of a spatial dimension in the chart such as height or width.</li>\n<li><strong>Legends</strong> are chart components that provide translation for data encodings\nthat are non-spatial, such as color values.</li>\n<li><strong>Data Transformations</strong> provide aggregation operations or visual processing\nto manipulate source data into a chartable form.</li>\n</ul>\n<h2 id=\"existing-systems\" style=\"position:relative;\"><a href=\"#existing-systems\" aria-label=\"existing systems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Existing Systems</h2>\n<p>Mark-based systems are common in data-visualization research, but are\nrelatively rare in practice. The most notable implementations of these systems\npresently are <a href=\"http://vega.github.io/\">Vega</a> and it's descendants\n<a href=\"https://vega.github.io/vega-lite/\">Vega-Lite</a>\nand <a href=\"https://altair-viz.github.io/\">Altair</a>.</p>\n<p>These systems are excellent for certain use cases, but are often tightly\ncoupled to a target rendering context (e.g. Browsers), and may be difficult to integrate\nwith application code.</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{"id":"introduction--background","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#introduction--background","ariaLabel":"introduction  background permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Introduction & Background"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"chart-parts"}]},{"type":"text","value":" is a flexible\n"},{"type":"element","tagName":"a","properties":{"href":"https://www.springer.com/us/book/9780387245447"},"children":[{"type":"text","value":"Grammar-of-Graphics"}]},{"type":"text","value":"\ndesigned for application developers."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the seminal book "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The Grammar of Graphics"}]},{"type":"text","value":", Leland Wilkinson envisioned a\nsystem of charting components and data-flow processes to support the generation\nof charts."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.springer.com/us/book/9780387245447"},"children":[{"type":"element","tagName":"img","properties":{"src":"/images/wilkinson_book.png","alt":"Wilkinson's Book"},"children":[]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The vision of "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"chart-parts"}]},{"type":"text","value":" is to implement a grammar of graphics in\nJavaScript in a flexible, architecture-agnostic way while dovetailing nicely\nwith frameworks application developers use such as React. To date,\nimplementations of the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Grammar of Graphics"}]},{"type":"text","value":" have tended to exist as closed\nsystems. While a closed system can be useful for certain categories of users,\nwe believe that these systems should provide escape hatches and flexibility."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"the-missing-abstraction","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#the-missing-abstraction","ariaLabel":"the missing abstraction permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"The Missing Abstraction"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Charting is a common and complex task. Charting libraries are often implemented\nas "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"taxonomies"}]},{"type":"text","value":" of charts, providing components such as "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"BarChart"}]},{"type":"text","value":",\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"LineChart"}]},{"type":"text","value":", "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"AreaChart"}]},{"type":"text","value":", or "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"ScatterPlot"}]},{"type":"text","value":" to cover the most broadly used types\nof charts. When a developer wants to augment a chart with a modest graphic\nsuch as a mean line or an uncertainty band, or make a novel visualization,\nit's often necessary to eject out of the charting library and work directly\nwith a 2D rendering API such as "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"SVG"}]},{"type":"text","value":", "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Canvas"}]},{"type":"text","value":" or "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"WebGL"}]},{"type":"text","value":". Additionally,\ncharting libraries are often browser-dependent, which precludes the ability to\nabstractly describe charts independently of platform."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/images/missing_abstraction.png","alt":"The missing abstraction of charting"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We believe that the notion of a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Grammar of Graphics"}]},{"type":"text","value":", sometimes referred to as\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"mark-based visualization"}]},{"type":"text","value":", has been proved in many contexts to be an elegant\nway to describe expressive, functional charts that are not as constrained by\nthe charting library that is selected. Moreover, this level of abstraction is\neasier to develop software at than low-level graphics libraries, and is not\ncoupled to any platform."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"key-concepts","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#key-concepts","ariaLabel":"key concepts permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Key Concepts"}]},{"type":"text","value":"\n"},{"type":"comment","value":"alex disable color "},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The Grammar of Graphics"}]},{"type":"text","value":", the author envisions a sequenced pipeline of\nsteps that are common to creating charts: including data transformations, scale\napplications, mark binding, and rendering of marks and guides. Each of these\nsteps is predicated on components existing to define these processes."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"These systems are built on the analogy that graphical elements are to charting as\nwords are to prose, and they are constructed of a \"language\" of fundamental\ncharting elements. These charting elements are described at a higher level than\nraw graphics primitives."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/images/analogy.png","alt":"Mark-to-word Analogy"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/images/pipeline.png","alt":"Leland Wilkinson's Grammar of Graphics Pipeline"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Marks"}]},{"type":"text","value":" are a key concept in chart-parts, and any system implementing a\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"grammar-of-graphics"}]},{"type":"text","value":". Marks are the visual building blocks of charts, such as\nrectangles, dots, and arcs."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Scales"}]},{"type":"text","value":" are mathematical functions that allow us to translate values from\na source domain into a target domain. These allow us to translate data into\nvisually encoded values such as color or height."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Axes"}]},{"type":"text","value":" are a common feature of charts that allow us to understand the\nencoding of a spatial dimension in the chart such as height or width."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Legends"}]},{"type":"text","value":" are chart components that provide translation for data encodings\nthat are non-spatial, such as color values."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Data Transformations"}]},{"type":"text","value":" provide aggregation operations or visual processing\nto manipulate source data into a chartable form."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"existing-systems","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#existing-systems","ariaLabel":"existing systems permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Existing Systems"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mark-based systems are common in data-visualization research, but are\nrelatively rare in practice. The most notable implementations of these systems\npresently are "},{"type":"element","tagName":"a","properties":{"href":"http://vega.github.io/"},"children":[{"type":"text","value":"Vega"}]},{"type":"text","value":" and it's descendants\n"},{"type":"element","tagName":"a","properties":{"href":"https://vega.github.io/vega-lite/"},"children":[{"type":"text","value":"Vega-Lite"}]},{"type":"text","value":"\nand "},{"type":"element","tagName":"a","properties":{"href":"https://altair-viz.github.io/"},"children":[{"type":"text","value":"Altair"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"These systems are excellent for certain use cases, but are often tightly\ncoupled to a target rendering context (e.g. Browsers), and may be difficult to integrate\nwith application code."}]}],"data":{"quirksMode":false}},"tableOfContents":"<ul>\n<li><a href=\"#introduction--background\">Introduction &#x26; Background</a></li>\n<li><a href=\"#the-missing-abstraction\">The Missing Abstraction</a></li>\n<li><a href=\"#key-concepts\">Key Concepts</a></li>\n<li><a href=\"#existing-systems\">Existing Systems</a></li>\n</ul>","frontmatter":{"date":null,"path":"/documentation/introduction","title":"Introduction"}},"toc":{"edges":[{"node":{"frontmatter":{"title":"Introduction","path":"/documentation/introduction","order":0}}},{"node":{"frontmatter":{"title":"Tutorial","path":"/documentation/tutorial","order":1}}},{"node":{"frontmatter":{"title":"Concepts","path":"/documentation/concepts","order":3}}},{"node":{"frontmatter":{"title":"Architecture","path":"/documentation/architecture","order":2}}},{"node":{"frontmatter":{"title":"API","path":"/documentation/apis","order":4}}},{"node":{"frontmatter":{"title":"Live Examples","path":"/documentation/examples","order":5}}},{"node":{"frontmatter":{"title":"Area Charts","path":"/documentation/examples/area_charts","order":2}}},{"node":{"frontmatter":{"title":"Bar Charts","path":"/documentation/examples/bar_charts","order":1}}},{"node":{"frontmatter":{"title":"Job Voyager","path":"/documentation/examples/job_voyager","order":6}}},{"node":{"frontmatter":{"title":"Line Chart","path":"/documentation/examples/line_chart","order":3}}},{"node":{"frontmatter":{"title":"Population Pyramid","path":"/documentation/examples/population_pyramid","order":5}}},{"node":{"frontmatter":{"title":"Scatter Plot","path":"/documentation/examples/scatter_plot","order":4}}},{"node":{"frontmatter":{"title":"Mark Playground","path":"/documentation/examples/mark-playground","order":0}}},{"node":{"frontmatter":{"title":"Feedback","path":"/documentation/feedback","order":6}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2075730424","2481025515"]}